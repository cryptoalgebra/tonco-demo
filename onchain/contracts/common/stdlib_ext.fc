int gas_consumed() asm "GASCONSUMED";
int storage_fees() asm "STORAGEFEES";
(cell) my_code() asm "MYCODE";

tuple get_c7() asm "c7 PUSH";
tuple get_fee_configs() asm "UNPACKEDCONFIGTUPLE";

forall X -> tuple tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> tuple _unsafe_tuple(X x) asm "NOP";

cell empty_cell() asm "<b b> PUSHREF";
slice empty_slice() asm "<b b> <s PUSHSLICE";

builder store_zeroes(builder b, int n) asm "STZEROES";

int nan() asm "PUSHNAN";
int is_nan(int x) asm "ISNAN";

;; Why is it removed?
int builder_null?(builder b) asm "ISNULL";
slice addr_none() asm "<b b{00} s, b> <s PUSHSLICE";

int log2_floor_p1(int x) asm "UBITSIZE";


builder coins2builder(builder sbuilder, int value, int decimals)  {
    if (is_nan(value)) {      
        sbuilder = sbuilder.store_slice("nan");
        return sbuilder;
    }
   
    ;; check sign 
    tuple chars = null();
    if (value < 0) {
        sbuilder~store_uint(45, 8);
        value = - value;
    }

    int count = 0;
    do {
        int r = value~divmod(10);
        chars = cons(r + 48, chars);
        count += 1;
        if (count == decimals) {
            chars = cons(46, chars);
        }
    } until (value == 0);

    ;; additional work to add front of the number that is < 1.0
    if (count == decimals) {
        chars = cons(48, chars);        
    }
    
    while(count < decimals) {
        chars = cons(48, chars);
        count += 1;          
        if (count == decimals) {
            chars = cons(46, chars);
            chars = cons(48, chars);
        }
    }

    do {
        int char = chars~list_next();
        sbuilder~store_uint(char, 8);
    } until (null?(chars));
  
    return sbuilder;
}



builder int2builder(builder sbuilder, int value)  {
  if (is_nan(value)) {      
      sbuilder = sbuilder.store_slice("nan");
   } else {
      tuple chars = null();
      if (value < 0) {
          sbuilder~store_uint(45, 8);
          value = - value;
      }
      do {
          int r = value~divmod(10);
          chars = cons(r + 48, chars);
      } until (value == 0);
      do {
          int char = chars~list_next();
          sbuilder~store_uint(char, 8);
      } until (null?(chars));
  }
  return sbuilder;
}
