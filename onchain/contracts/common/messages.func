{- Generic message flags -}

const int MESSAGE_TAG              = 0x1;
const int MESSAGE_FLAG_IHR_DISABLE = 0x2;
const int MESSAGE_FLAG_BOUNCE      = 0x4;
const int MESSAGE_FLAG_BOUNCED     = 0x8;

const int MODE_NORMAL           = 0;
const int MODE_PAID_EXTERNALLY  = 1;
const int MODE_IGNORE_ERRORS    = 2;

const int MODE_BOUNCE_IF_FAIL      = 16;
const int MODE_DESTROY_IF_ZERO     = 32;
const int MODE_CARRY_REMAINING_GAS = 64;
const int MODE_CARRY_ALL_BALANCE   = 128;


const int RESERVE_EXACTLY    = 0;
const int RESERVE_ALL_EXCEPT = 1;
const int RESERVE_AT_MOST    = 2;
const int EXTRN_DO_NOT_FAIL  = 2;
const int BALANCE_INCREASED  = 4;
const int BALANCE_DECREASED  = 8;
const int RESERVE_BOUNCE_ON_ACTION_FAIL = 16;

{- Remove all magic constants -}

{-     
    .store_uint(0x18, 6)      ;; Is a more optimal compact form of lines below. Compiler is unable to do this optimization
          ||
    .store_uint(MESSAGE_FLAG_IHR_DISABLE | MESSAGE_FLAG_BOUNCE , 4) ;; tags 
    .store_slice(source)   ;; Source address would be rewritten by validator, so you can put here 00b - that is a shortest form of valid address

    Same as:
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          ||
    .store_dict (extra_currencies)
    .store_coins(0)            ;; ihr_fee
    .store_coins(fwd_value)    ;; fwd_fee 
    .store_uint (cur_lt(), 64) ;; lt of transaction
    .store_uint (now(), 32)    ;; unixtime of transaction
    .store_uint (0,  1)        ;; no init-field flag (Maybe)
    .store_uint (0,  1)        ;; inplace message body flag (Either)

-}
() send_empty_message(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)      
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
    send_raw_message(msg, mode);
}

() send_simple_message(int amount, slice to_address, cell body, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(body)
    .end_cell();
    send_raw_message(msg, mode);
}

() send_message_with_stateinit(int amount, slice to, cell state_init, cell body, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(7, 108)
        .store_ref(state_init)
        .store_ref(body)
    .end_cell();
    send_raw_message(msg, mode);
}

() send_payload(slice to_address, cell payload) impure inline_ref {
  cell msg = begin_cell()
    .store_uint (0x18, 6)
    .store_slice(to_address) 
    .store_coins(0) 
    .store_uint (1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref  (payload)
  .end_cell();
  send_raw_message(msg, MODE_CARRY_ALL_BALANCE); 
}

{- Send message with non-bounce flag -}
() send_message_nb(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
     msg = msg.store_builder(payload);
  }
  send_raw_message(msg.end_cell(), send_mode);
}

(int) get_workchain(slice address) inline {
  (int wc, _) = parse_std_addr(address);
  return wc;
}

() force_chain(int workchain, slice address, int error_code) impure inline {
  (int wc) = get_workchain(address);
  throw_unless(error_code, wc == workchain);
}

{- - -}

slice calculate_address(cell state_init, int workchain) inline {
  return begin_cell()
    .store_uint(4, 3)
    .store_int( workchain, 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell().begin_parse();
}
