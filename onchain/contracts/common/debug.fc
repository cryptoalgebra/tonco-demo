#include "../imports/stdlib.fc";
#include "stdlib_ext.fc";


{- Seems like these are not working -}
;;() dumphex(int str) impure asm "HEXDUMP";
;;() strdumpnr(slice str) impure asm "STRPRINT";

() dumpstr(slice prefix) impure
{
    ~strdump(prefix);
    return ();
}



() dumpint(slice prefix, int value ) impure 
{   
    builder sbuilder = begin_cell().store_slice(prefix);
    sbuilder = int2builder(sbuilder, value);
    slice result = sbuilder.end_cell().begin_parse();
    ~strdump(result);
    
    return ();
}

() dumpinthex(slice prefix, int value ) impure 
{   
    builder sbuilder = begin_cell().store_slice(prefix);

    tuple chars = null();
    if (value < 0) {
        sbuilder~store_uint(45, 8);
        value = - value;
    }

    sbuilder = sbuilder.store_slice("0x");
    do {
        int r = value~divmod(16);
        if (r < 10) {
            chars = cons(r + 48, chars);
        } else {
            chars = cons(r + 65 - 10 , chars);
        }
    } until (value == 0);
    do {
        int char = chars~list_next();
        sbuilder~store_uint(char, 8);
    } until (null?(chars));

    slice result = sbuilder.end_cell().begin_parse();
    ~strdump(result);
  
    return ();
}


() addressdump(slice address) impure 
{
    cell tmpCell = begin_cell().store_slice(address).end_cell();
    slice ts = tmpCell.begin_parse();
    int addrType  = ts~load_uint(2);
    int anycast   = ts~load_uint(1);
    int workchain = ts~load_uint(8);
  
    builder sbuilder = begin_cell().store_slice("0:");
    repeat(64) {
        int r = ts~load_uint(4);
        int char = (r < 10) ? (r + 48) : (r + 97 - 10);
        sbuilder~store_uint(char, 8);
    }
    slice result = sbuilder.end_cell().begin_parse();
    ~strdump(result);
   
    return ();
}

() dumpaddr(slice prefix, slice address) impure 
{
    cell tmpCell = begin_cell().store_slice(address).end_cell();
    slice ts = tmpCell.begin_parse();
    int addrType  = ts~load_uint(2);
    builder sbuilder = begin_cell().store_slice(prefix);

    if (addrType == 2) {
        int anycast   = ts~load_uint(1);
        int workchain = ts~load_uint(8);
        sbuilder = sbuilder.store_slice("0:");
        repeat(64) {
            int r = ts~load_uint(4);
            int char = (r < 10) ? (r + 48) : (r + 97 - 10);
            sbuilder = sbuilder.store_uint(char, 8);
        }      
    } elseif (addrType == 0) {
        sbuilder = sbuilder.store_slice("null");    
    } else {
        sbuilder = sbuilder.store_slice("non-internal");
    }

    slice result = sbuilder.end_cell().begin_parse();
    ~strdump(result);   
    return ();
}


() dumpcontent (cell content) impure 
{
    slice cs = content.begin_parse();
    int flag = cs~load_uint(8);
    
    cell value_dict = cs~load_dict();
    int hash = 0;
    int hasValue = -1;
    while (hasValue != 0) {
        (int hashNew, slice value, hasValue) = udict_get_next?(value_dict, 256, hash);
        if (hasValue != 0) {
            slice entry = value~load_ref().begin_parse();
            int flag = entry~load_uint(8);
            ~strdump(entry);
        }
        hash = hashNew;      
    }
}