
{-
    This is the original document
    https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb

    TODO: Seems like update 
    https://docs.ton.org/learn/tvm-instructions/fee-calculation-instructions 
    can make this simpler.
-}
{- (slice, (int, int, int, int)) parse_config21(slice config21) {
    int tag = config21~load_uint(8);
    if (tag == 0xd1) {
        int flat_gas_limit = config21~load_uint(64);
        int flat_gas_price = config21~load_uint(64);
        (_, _, int gas_price, int gas_limit) = config21~parse_config21();
        return (config21, (flat_gas_limit, flat_gas_price, gas_price, gas_limit));
    } elseif ((tag == 0xde) | (tag == 0xdd)) {
        int gas_price = config21~load_uint(64);
        int gas_limit = config21~load_uint(64);        
        return (config21, (0, 0, gas_price, gas_limit));
    } else {
        return (config21, (0, 0, 0, 0));
    }
} -}


global tuple conf::gas;
const int FLAT_GAS_LIMIT_ID = 0;
const int FLAT_GAS_PRICE_ID = 1;
const int GAS_LIMIT_ID = 2;
const int GAS_PRICE_ID = 3;



(slice, ()) parse_config(slice config21) impure inline {
    int tag = config21~load_uint(8);
    while (tag == 0xd1) {
        conf::gas~tset(FLAT_GAS_LIMIT_ID, config21~load_uint(64));
        conf::gas~tset(FLAT_GAS_PRICE_ID, config21~load_uint(64));
        tag = config21~load_uint(8);
    } 
    if ((tag == 0xde) | (tag == 0xdd)) {
        conf::gas~tset(GAS_PRICE_ID, config21~load_uint(64));
        conf::gas~tset(GAS_LIMIT_ID, config21~load_uint(64));
    }
    return (config21, ());
}


() gas_price_parse() impure {
    {-
    int startGas = gas_consumed();
    cell config_21 = config_param(21);
    slice config_21_slice = config_21.begin_parse();
    (int flat_gas_limit, int flat_gas_price, int gas_price, int gas_limit) = config_21_slice~parse_config21();
    int endGas = gas_consumed();

    ~strdump("Recursive");
    ~dump(flat_gas_limit);
    ~dump(flat_gas_price);
    ~dump(gas_price);
    ~dump(gas_limit);
    ~dump(endGas - startGas);
    -}

    {-D-} ;;dumpstr("using c7 to load gas prices");

    ;;int startGas1 = gas_consumed();
    conf::gas = _unsafe_tuple(tuple4(0,0,0,0));
    slice config_211 = get_fee_configs().at(3);
    config_211~parse_config();
    ;;int endGas1 = gas_consumed();

        
    {-D-} ;;dumpstr("Global tuple stores:");
    {-D-} ;;dumpint("FLAT_GAS_LIMIT : ", conf::gas.at(FLAT_GAS_LIMIT_ID));
    {-D-} ;;dumpint("FLAT_GAS_PRICE : ", conf::gas.at(FLAT_GAS_PRICE_ID));
    {-D-} ;;dumpint("GAS_LIMIT      : ", conf::gas.at(GAS_LIMIT_ID));
    {-D-} ;;dumpint("GAS_PRICE      : ", conf::gas.at(GAS_PRICE_ID));
    ;;dump(endGas1 - startGas1);

}
